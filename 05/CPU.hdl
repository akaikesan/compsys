// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:





//start from instruction and inM to ALU-----------------------------------------------------


    Mux16(a=instruction,b=aluout,sel=instruction[15],out=insORalu);

    //loadAR depends on d1 and i.

    Not(in=instruction[15],out=noti);
    Or(a=instruction[5],b=noti,out=loadAR);

    ARegister(in=insORalu,load=loadAR,out=ARout);          //you code Only ARegister. no need to code CRegister.

    And(a=instruction[12],b=instruction[15],out=cMux1);

    Mux16(a=ARout,b=inM,sel=cMux1,out=ARORinM);

    And(a=instruction[4],b=instruction[15],out=cDR);
    DRegister(in=aluout,load=cDR,out=DRout);

    ALU(out=outM,x=DRout,y=ARORinM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=aluout,zr=out0,ng=outng);



//end of part of ALU------------output:out0,outng,ARout-----------------------------------------








//<-------------------------writeM
    And(a=instruction[15],b=instruction[3],out=w);
    Mux(a=false,b=true,sel=w,out=writeM);
//writeM------------------------->








//<-------------------------addressM
    Mux16(b=ARout,sel=true,out[0..14]=addressM,out[15]=noneed);
//addressM------------------------->






//<-------------------------PC
    Or(a=outng,b=out0,out=notpv);
    Not(in=notpv,out=pv);    //ng==0 && zr==0 ->pv=1

    And(a=instruction[2],b=outng,out=jcmp1);
    And(a=instruction[1],b=out0,out=jcmp2);
    And(a=instruction[0],b=pv,out=jcmp3);

    Or(a=jcmp1,b=jcmp2,out=pctmp);
    Or(a=jcmp3,b=pctmp,out=rawloadPC);

    Nand(a=instruction[15],b=rawloadPC,out=incPC);  //because (not rawloadPC) is rawincPC

    And(a=instruction[15],b=rawloadPC,out=loadPC);



    PC(in=ARout,load=loadPC,inc=incPC,reset=reset,out[0..14]=pc,out[15]=noneed2);

//PC------------------------->

}
